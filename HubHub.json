{
    "slots": {
        "0": {
            "name": "Screen",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "1": {
            "name": "Memory",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "2": {
            "name": "Hub1",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "3": {
            "name": "Hub2",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "4": {
            "name": "Hub3",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "5": {
            "name": "Hub4",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "6": {
            "name": "Hub5",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "7": {
            "name": "Hub6",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "8": {
            "name": "Hub7",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "9": {
            "name": "Hub8",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "-1": {
            "name": "unit",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "-3": {
            "name": "player",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "-2": {
            "name": "construct",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "-4": {
            "name": "system",
            "type": {
                "events": [],
                "methods": []
            }
        },
        "-5": {
            "name": "library",
            "type": {
                "events": [],
                "methods": []
            }
        }
    },
    "handlers": [
        {
            "code": "ItemsListName = {}\nItemsListQuantity = {}\nItemsListVolume = {}     \nItemsListMass = {}\nItemsList = {}\nunit.setTimer('ReloadTimer',1)",
            "filter": {
                "args": [
                    {
                        "value": "Reload"
                    }
                ],
                "signature": "onOutputChanged(output)",
                "slotKey": "0"
            },
            "key": "0"
        },
        {
            "code": "SortSwitch = 4\nMemory.setIntValue('SortSwitch',SortSwitch)\nPage = 1\nUpdateData()",
            "filter": {
                "args": [
                    {
                        "value": "Item"
                    }
                ],
                "signature": "onOutputChanged(output)",
                "slotKey": "0"
            },
            "key": "1"
        },
        {
            "code": "SortSwitch = 2\nMemory.setIntValue('SortSwitch',SortSwitch)\nPage = 1\nUpdateData()",
            "filter": {
                "args": [
                    {
                        "value": "Quantity"
                    }
                ],
                "signature": "onOutputChanged(output)",
                "slotKey": "0"
            },
            "key": "2"
        },
        {
            "code": "SortSwitch = 3\nMemory.setIntValue('SortSwitch',SortSwitch)\nPage = 1\nUpdateData()",
            "filter": {
                "args": [
                    {
                        "value": "Mass"
                    }
                ],
                "signature": "onOutputChanged(output)",
                "slotKey": "0"
            },
            "key": "3"
        },
        {
            "code": "SortSwitch = 1\nMemory.setIntValue('SortSwitch',SortSwitch)\nPage = 1\nUpdateData()",
            "filter": {
                "args": [
                    {
                        "value": "Volume"
                    }
                ],
                "signature": "onOutputChanged(output)",
                "slotKey": "0"
            },
            "key": "4"
        },
        {
            "code": "DisplayMode = 'Table'\nMemory.setStringValue('DisplayMode',DisplayMode)\nUpdateData()",
            "filter": {
                "args": [
                    {
                        "value": "Table"
                    }
                ],
                "signature": "onOutputChanged(output)",
                "slotKey": "0"
            },
            "key": "5"
        },
        {
            "code": "DisplayMode = 'Cards'\nMemory.setStringValue('DisplayMode',DisplayMode)\nUpdateData()",
            "filter": {
                "args": [
                    {
                        "value": "Cards"
                    }
                ],
                "signature": "onOutputChanged(output)",
                "slotKey": "0"
            },
            "key": "6"
        },
        {
            "code": "Hub1Parsed = ReceivePayload(Hub1)",
            "filter": {
                "args": [],
                "signature": "onContentUpdate()",
                "slotKey": "2"
            },
            "key": "7"
        },
        {
            "code": "Hub2Parsed = ReceivePayload(Hub2)",
            "filter": {
                "args": [],
                "signature": "onContentUpdate()",
                "slotKey": "3"
            },
            "key": "8"
        },
        {
            "code": "Hub3Parsed = ReceivePayload(Hub3)",
            "filter": {
                "args": [],
                "signature": "onContentUpdate()",
                "slotKey": "4"
            },
            "key": "9"
        },
        {
            "code": "Hub4Parsed = ReceivePayload(Hub4)",
            "filter": {
                "args": [],
                "signature": "onContentUpdate()",
                "slotKey": "5"
            },
            "key": "10"
        },
        {
            "code": "Hub5Parsed = ReceivePayload(Hub5)",
            "filter": {
                "args": [],
                "signature": "onContentUpdate()",
                "slotKey": "6"
            },
            "key": "11"
        },
        {
            "code": "Hub6Parsed = ReceivePayload(Hub6)",
            "filter": {
                "args": [],
                "signature": "onContentUpdate()",
                "slotKey": "7"
            },
            "key": "12"
        },
        {
            "code": "Hub7Parsed = ReceivePayload(Hub7)",
            "filter": {
                "args": [],
                "signature": "onContentUpdate()",
                "slotKey": "8"
            },
            "key": "13"
        },
        {
            "code": "Hub8Parsed = ReceivePayload(Hub8)",
            "filter": {
                "args": [],
                "signature": "onContentUpdate()",
                "slotKey": "9"
            },
            "key": "14"
        },
        {
            "code": "-------- Initialization --------\nScrollSpeed = 2 --export: Adjusts Scroll Speed\n\nScreen.setScriptInput('')\n\nDisplayMode = 'Table'\nSortSwitch = 1\n\nif Memory.hasKey('DisplayMode') == 1 then\n    DisplayMode = Memory.getStringValue('DisplayMode')\nend\n\nif Memory.hasKey('SortSwitch') == 1 then\n    SortSwitch = Memory.getIntValue('SortSwitch')\nend\n\nUpdateTime = 0\nif Memory.hasKey('UTime') == 1 then\n    UpdateTime = tonumber(Memory.getStringValue('UTime'))\nend   \n\nHub1Updated = false\nHub2Updated = false\nHub3Updated = false\nHub4Updated = false\nHub5Updated = false\nHub6Updated = false\nHub7Updated = false\nHub8Updated = false\n\nHub1Parsed = false\nHub2Parsed = false\nHub3Parsed = false\nHub4Parsed = false\nHub5Parsed = false\nHub6Parsed = false\nHub7Parsed = false\nHub8Parsed = false\n\nNHubs = exists(Hub1)+exists(Hub2)+exists(Hub3)+exists(Hub4)\n+exists(Hub5)+exists(Hub6)+exists(Hub7)+exists(Hub8)\n\nPage = 1\nNumItems = 0\n\nItemsListName = {}\nItemsListQuantity = {}\nItemsListVolume = {}     \nItemsListMass = {}\nItemsList = {}\n\nif Memory.hasKey('ItemsList') == 1 then\n    ItemsList = json.decode(Memory.getStringValue('ItemsList'))\n    NumItems = 0 \n    unit.stopTimer('ReloadTimer') \n    \n    for id, quantity in pairs(ItemsList) do\n        \n        NumItems = NumItems + 1\n        \n        itemData = system.getItem(tonumber(id))\n        \n        ItemsListName[id] = itemData[\"displayNameWithSize\"]\n        ItemsListQuantity[id] = quantity\n        ItemsListVolume[id] = quantity*itemData[\"unitVolume\"]        \n        ItemsListMass[id] = quantity*itemData[\"unitMass\"]\n\n    end\n    \nend\nUpdateData()\n\nunit.setTimer('ListenforInput',1/10)",
            "filter": {
                "args": [],
                "signature": "onStart()",
                "slotKey": "-1"
            },
            "key": "15"
        },
        {
            "code": "if Hub1 and not Hub1Updated then  \n    H1 = Hub1.updateContent()\n    if H1 > 0 then \n        unit.setTimer('ReloadTimer',H1+1)\n    else\n        Hub1Updated = true\n    end\n    goto continue\nend\n\nif Hub2 and not Hub2Updated then \n    H2 = Hub2.updateContent()\n    if H2 > 0 then\n        unit.setTimer('ReloadTimer',H2+1)\n    else\n        Hub2Updated = true\n    end\n    goto continue\nend\n\nif Hub3 and not Hub3Updated then \n    H3 = Hub3.updateContent()\n    if H3 > 0 then\n        unit.setTimer('ReloadTimer',H3+1)\n    else\n        Hub3Updated = true\n    end\n    goto continue\nend\n\nif Hub4 and not Hub4Updated then \n    H4 = Hub4.updateContent()\n    if H4 > 0 then\n        unit.setTimer('ReloadTimer',H4+1)\n    else\n        Hub4Updated = true\n    end\n    goto continue\nend\n\nif Hub5 and not Hub5Updated then  \n    H5 = Hub5.updateContent()\n    if H5 > 0 then \n        unit.setTimer('ReloadTimer',H5+1)\n    else\n        Hub5Updated = true\n    end\n    goto continue\nend\n\nif Hub6 and not Hub6Updated then \n    H6 = Hub6.updateContent()\n    if H6 > 0 then\n        unit.setTimer('ReloadTimer',H6+1)\n    else\n        Hub6Updated = true\n    end\n    goto continue\nend\n\nif Hub7 and not Hub7Updated then \n    H7 = Hub7.updateContent()\n    if H7 > 0 then\n        unit.setTimer('ReloadTimer',H7+1)\n    else\n        Hub7Updated = true\n    end\n    goto continue\nend\n\nif Hub8 and not Hub8Updated then \n    H8 = Hub8.updateContent()\n    if H8 > 0 then\n        unit.setTimer('ReloadTimer',H8+1)\n    else\n        Hub8Updated = true\n    end\n    goto continue\nend\n\n::continue::\n\nParsedHubs = boolTonumber[Hub1Parsed]+\n        boolTonumber[Hub2Parsed]+\n        boolTonumber[Hub3Parsed]+\n        boolTonumber[Hub4Parsed]+\n        boolTonumber[Hub5Parsed]+\n        boolTonumber[Hub6Parsed]+\n        boolTonumber[Hub7Parsed]+\n        boolTonumber[Hub8Parsed]\n\nif ParsedHubs ~= NHubs then \n    unit.setTimer('ReloadTimer',1)\n    goto waitforparse \nend\n\nReloadedHubs = boolTonumber[Hub1Updated]+\n        boolTonumber[Hub2Updated]+\n        boolTonumber[Hub3Updated]+\n        boolTonumber[Hub4Updated]+\n        boolTonumber[Hub5Updated]+\n        boolTonumber[Hub6Updated]+\n        boolTonumber[Hub7Updated]+\n        boolTonumber[Hub8Updated]\n\nif ReloadedHubs == NHubs then\n    \n    NumItems = 0 \n    unit.stopTimer('ReloadTimer') \n    \n    ItemsListName = {}\n    ItemsListQuantity = {}\n    ItemsListVolume = {}       \n    ItemsListMass = {}\n    \n    for id, quantity in pairs(ItemsList) do\n        \n        NumItems = NumItems + 1\n        \n        itemData = system.getItem(tonumber(id))\n        \n        ItemsListName[id] = itemData[\"displayNameWithSize\"]\n        ItemsListQuantity[id] = quantity\n        ItemsListVolume[id] = quantity*itemData[\"unitVolume\"]        \n        ItemsListMass[id] = quantity*itemData[\"unitMass\"]\n\n    end\n    \n    Memory.setStringValue('ItemsList',json.encode(ItemsList))\n    UpdateTime = system.getArkTime()\n    Memory.setStringValue('UTime',tostring(UpdateTime))\n    UpdateData()\n    \nend\n\n::waitforparse::",
            "filter": {
                "args": [
                    {
                        "value": "ReloadTimer"
                    }
                ],
                "signature": "onTimer(tag)",
                "slotKey": "-1"
            },
            "key": "16"
        },
        {
            "code": "if NumItems > 0 then\n    \n    OldPage = Page\n    \n    Page = Page - math.floor(ScrollSpeed*math.max(math.min(system.getMouseWheel(), 1), -1)+ 0.5);\n    Page = math.max(math.min(Page, math.ceil(NumItems/3) - 2), 1); \n       \n    if OldPage ~= Page then\n        UpdateData()\n    end\n    \nend",
            "filter": {
                "args": [
                    {
                        "value": "ListenforInput"
                    }
                ],
                "signature": "onTimer(tag)",
                "slotKey": "-1"
            },
            "key": "17"
        },
        {
            "code": "Screen.setRenderScript([[\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------- Initialize -----------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n--Converts boolean to 1,0 for easier checking.\nboolTonumber={[true]=1,[false]=0}\n\nif not _init then\n    \n    NHubs = 0\n    DataTable = {}\n    Empty = {}\n    Page = 1\n    PageMax = 1\n    \n    Cards = false\n    Table = true\n    \n    ReloadPressedTime = 0\n    ReloadButtonToggle = true\n    _init = true\n    \n    ItemSort = false\n    QuantitySort = false\n    VolumeSort = true\n    MassSort = false\n    \nend\n\nfunction round(num, numDecimalPlaces)\n    local mult = 10^(numDecimalPlaces or 0)\n    return math.floor(num * mult + 0.5) / mult\nend\n\nfunction mysplit(inputstr, sep)\n    if sep == nil then\n        sep = \"%s\"\n    end\n    local t={}\n    for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\n        table.insert(t, str)\n    end\n    return t\nend\n\n-- Thousands Seperator\nfunction formatComma(num)\n    return formatStr(num..\"\")\nend\n\nfunction formatStr(val)\n    if string.len(val) <= 3 then\n        return val\n    end\n\n    right = string.sub(val, string.len(val)-2)\n    left = string.sub(val, 0,string.len(val)-3)\n    return formatComma(left) ..\",\"..right\nend\n\nPayload = getInput()\n\nif Payload ~= nil and Payload ~= '' then\n        \n    PayloadType = mysplit(Payload, \"&\")    \n    \n    Info = mysplit(PayloadType[1], \"$\")\n    NHubs = Info[1]\n    Page = Info[2]\n    PageMax = Info[3]\n    DisplayMode = Info[4]\n    SortSwitch = Info[5]\n    UpdateTime = Info[6]\n    \n    if SortSwitch == 1 then\n        ItemSort = false\n        QuantitySort = false\n        VolumeSort = true\n        MassSort = false\n    elseif SortSwitch == 2 then\n        ItemSort = false\n        QuantitySort = true\n        VolumeSort = false\n        MassSort = false\n    elseif SortSwitch == 3 then\n        ItemSort = false\n        QuantitySort = false\n        VolumeSort = false\n        MassSort = true\n    elseif SortSwitch == 4 then\n        ItemSort = true\n        QuantitySort = false\n        VolumeSort = false\n        MassSort = false\n    end\n    \n    if DisplayMode == \"Table\" then\n        Cards = false\n        Table = true\n    elseif DisplayMode == \"Cards\" then\n        Cards = true\n        Table = false\n    end\n    \n    \n    HubsInfo = mysplit(PayloadType[2], \"$\")\n    \n    if PayloadType[3] ~= nil and PayloadType[3] ~= '' then\n        \n        DataRows = mysplit(PayloadType[3], \"#\")  \n        DataTable = {}\n        for idx, v in ipairs(DataRows) do\n            CurrentRow = mysplit(v, \"$\") \n            DataTable[idx] = {Q = CurrentRow[1],V = CurrentRow[2],M = CurrentRow[3],I = CurrentRow[4],N = CurrentRow[5]}\n        end\n        \n    else\n        \n        DataTable = {}\n        \n    end\n    \nend\n\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------- Background -----------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nlocal rx, ry = getResolution()\nlocal vw = rx/100\nlocal vh = ry/100\nlocal Logo = createLayer()\nlocal LogoCurtain = createLayer()\nlocal Aura0 = createLayer()\nlocal Aura1 = createLayer()\nlocal Font = loadFont(getAvailableFontName(5), 6*vh)\n\nsetNextFillColor(Aura0,0,0.2,0.8,0.15)\nsetNextShadow(Aura0,100*vh,0,0.2,0.8,0.15)\naddBox(Aura0, 40*vw, 40*vh, 20*vw, 20*vh)\n\nfor ii = 3,165,8 do\n    setNextStrokeColor(Aura0,0,0.2,0.8,0.05)\n    setNextStrokeWidth(Aura0,0.05*vh)\n    addLine(Aura0,ii*vh,0,ii*vh,ry)\nend\n\nfor ii = 6,98,8 do\n    setNextStrokeColor(Aura0,0,0.2,0.8,0.05)\n    setNextStrokeWidth(Aura0,0.05*vh)\n    addLine(Aura0,0,ii*vh,rx,ii*vh)\nend\n\nPX = {0,0.2,0.23,0.77,0.8,1}\nPY = {0.03,0.03,0.07,0.07,0.03,0.03}\n    \nfor ii = 1,#PX-1,1 do\n    setNextStrokeColor(Aura1, 0,0.4,0.8, 1) \n    addLine(Aura1, PX[ii]*rx, PY[ii]*ry, PX[ii+1]*rx, PY[ii+1]*ry) \nend\n\nfor ii = 1,#PX-1,1 do\n    setNextStrokeColor(Aura1, 0,0.4,0.8, 1) \n    addLine(Aura1, PX[ii]*rx, ry-PY[ii]*ry, PX[ii+1]*rx, ry-PY[ii+1]*ry) \nend\n\nsetFontSize(Font, 4*vh)\nsetNextTextAlign(Aura1, AlignH_Center, AlignV_Middle)\nsetNextFillColor(Aura1, 255/255, 255/255, 255/255, 1)\naddText(Aura1, Font, \"Refreshed: \" .. round(tonumber(UpdateTime)/60,1) .. \" Minutes Ago\" , 0.5*rx ,0.035*ry)\n\n----------\n-- Logo --\n----------\n\nX = {400, 420, 380, 322, 322, 380, 432, 432, 444, 444}\nY = {641+20, 509+20, 472+20, 526+20, 272+20, 326+20, 285+20, 188+20, 188+20, 285+20}\n\nlocal s = 875/ry\nlocal t = (rx - ry)/2\nlocal LogoAlpha = 1\n\nsetNextFillColor(LogoCurtain,0/255, 0/255, 0/255,0.9)\naddBox(LogoCurtain, 40*vw, 20*vh, 20*vw, 60*vh)\n\n-- Zero --\n\nsetDefaultFillColor(Logo, Shape_Polygon, 144/255, 144/255, 144/255, 1)\n\naddQuad(Logo,X[1]/s + t,Y[1]/s,X[2]/s + t,Y[2]/s,X[3]/s + t,Y[3]/s,X[4]/s + t,Y[4]/s)\nsetNextFillColor(Logo,160/255, 160/255, 160/255,LogoAlpha)\naddQuad(Logo,X[3]/s + t,Y[3]/s,X[4]/s + t,Y[4]/s,X[5]/s + t,Y[5]/s,X[6]/s + t,Y[6]/s)\naddQuad(Logo,X[5]/s + t,Y[5]/s,X[6]/s + t,Y[6]/s,X[7]/s + t,Y[7]/s,X[8]/s + t,Y[8]/s)\naddQuad(Logo,rx -1*(X[1]/s + t),Y[1]/s,rx -1*(X[2]/s + t),Y[2]/s,rx -1*(X[3]/s + t),Y[3]/s,rx -1*(X[4]/s + t),Y[4]/s)\nsetNextFillColor(Logo,120/255, 120/255, 120/255,LogoAlpha)\naddQuad(Logo,rx -1*(X[3]/s + t),Y[3]/s,rx -1*(X[4]/s + t),Y[4]/s,rx -1*(X[5]/s + t),Y[5]/s,rx -1*(X[6]/s + t),Y[6]/s)\nsetNextFillColor(Logo,160/255, 160/255, 160/255,LogoAlpha)\naddQuad(Logo,rx -1*(X[5]/s + t),Y[5]/s,rx -1*(X[6]/s + t),Y[6]/s,rx -1*(X[7]/s + t),Y[7]/s,rx -1*(X[8]/s + t),Y[8]/s)\naddQuad(Logo,X[7]/s + t,Y[7]/s,X[8]/s + t,Y[8]/s,X[9]/s + t,Y[9]/s,X[10]/s + t,Y[10]/s)\n\n-- Shading Zero --\n\nsetDefaultStrokeWidth(Logo,Shape_Line,1.5*vh)\n\nsetNextStrokeColor(Logo,110/255, 110/255, 110/255, LogoAlpha)\naddLine(Logo,X[4]/s + t,Y[4]/s,X[5]/s + t,Y[5]/s)\n\nsetNextStrokeColor(Logo,90/255, 90/255, 90/255, LogoAlpha)\naddLine(Logo,X[6]/s + t,Y[6]/s,X[3]/s + t,Y[3]/s)\n\nsetNextStrokeColor(Logo,155/255, 155/255, 155/255, LogoAlpha)\naddLine(Logo,X[2]/s + t,Y[2]/s,X[3]/s + t,Y[3]/s)\n\nsetNextStrokeColor(Logo,80/255, 80/255, 80/255, LogoAlpha)\naddLine(Logo,X[1]/s + t,Y[1]/s,X[4]/s + t,Y[4]/s)\n\nsetNextStrokeColor(Logo,100/255, 100/255, 100/255, LogoAlpha)\naddLine(Logo,X[1]/s + t,Y[1]/s,X[2]/s + t,Y[2]/s)\n\nsetNextStrokeColor(Logo,60/255, 60/255, 60/255, LogoAlpha)\naddLine(Logo,X[6]/s + t,Y[6]/s,X[7]/s + t,Y[7]/s)\n\nsetNextStrokeColor(Logo,110/255, 110/255, 110/255, LogoAlpha)\naddLine(Logo,rx -1*(X[4]/s + t),Y[4]/s,rx -1*(X[5]/s + t),Y[5]/s)\n\nsetNextStrokeColor(Logo,90/255, 90/255, 90/255, LogoAlpha)\naddLine(Logo,rx -1*(X[6]/s + t),Y[6]/s,rx -1*(X[3]/s + t),Y[3]/s)\n\nsetNextStrokeColor(Logo,130/255, 130/255, 130/255, LogoAlpha)\naddLine(Logo,X[5]/s + t,Y[5]/s,X[8]/s + t,Y[8]/s)\n\nsetNextStrokeColor(Logo,155/255, 155/255, 155/255, LogoAlpha)\naddLine(Logo,rx -1*(X[2]/s + t),Y[2]/s,rx -1*(X[3]/s + t),Y[3]/s)\n\nsetNextStrokeColor(Logo,80/255, 80/255, 80/255, LogoAlpha)\naddLine(Logo,rx -1*(X[1]/s + t),Y[1]/s,rx -1*(X[4]/s + t),Y[4]/s)\n\nsetNextStrokeColor(Logo,100/255, 100/255, 100/255, LogoAlpha)\naddLine(Logo,rx -1*(X[1]/s + t),Y[1]/s,rx -1*(X[2]/s + t),Y[2]/s)\n\nsetNextStrokeColor(Logo,60/255, 60/255, 60/255, LogoAlpha)\naddLine(Logo,rx -1*(X[6]/s + t),Y[6]/s,rx -1*(X[7]/s + t),Y[7]/s)\n\nsetNextStrokeColor(Logo,130/255, 130/255, 130/255, LogoAlpha)\naddLine(Logo,rx -1*(X[5]/s + t),Y[5]/s,rx -1*(X[8]/s + t),Y[8]/s)\n\nsetNextStrokeColor(Logo,130/255, 130/255, 130/255, LogoAlpha)\naddLine(Logo,X[8]/s + t,Y[8]/s,rx -1*(X[8]/s + t),Y[8]/s)\n\n----------\n-- Logo --\n----------\n\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------- Foreground -----------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------- Buttons / Tabs -------------------------------------------------------------------------\n\nlocal SubFont = loadFont(getAvailableFontName(9), 3*vh)\n\nlocal function insidePolygon(polygon, x, y)\n    point = {x = x, y = y}\n    local oddNodes = false\n    local j = #polygon\n    for i = 1, #polygon do\n        if (polygon[i].y < point.y and polygon[j].y >= point.y or polygon[j].y < point.y and polygon[i].y >= point.y) then\n            if (polygon[i].x + ( point.y - polygon[i].y ) / (polygon[j].y - polygon[i].y) * (polygon[j].x - polygon[i].x) < point.x) then\n                oddNodes = not oddNodes;\n            end\n        end\n        j = i;\n    end\n    return oddNodes \nend\n\nsetFontSize(Font, 4*vh)\nwb, hb = getTextBounds(Font,\"Reload Data\")\nReloadPoly = {\n    {x = 0.10*rx - wb/2,y = 94.5*vh - hb/2},\n    {x = 0.10*rx - wb/2,y = 94.5*vh + hb/2},\n    {x = 0.10*rx + wb/2,y = 94.5*vh + hb/2},\n    {x = 0.10*rx + wb/2,y = 94.5*vh - hb/2}\n}\n\nsetFontSize(Font, 4*vh)\nwb, hb = getTextBounds(Font,\"Cards\")\nCardsPoly = {\n    {x = 0.10*rx - wb,y = 3.5*vh},\n    {x = 0.10*rx - wb,y = 3.5*vh + hb},\n    {x = 0.10*rx,y = 3.5*vh + hb},\n    {x = 0.10*rx,y = 3.5*vh}\n}\n\nsetFontSize(Font, 4*vh)\nwb, hb = getTextBounds(Font,\"Table\")\nTablePoly = {\n    {x = 0.12*rx + wb,y = 3.5*vh},\n    {x = 0.12*rx + wb,y = 3.5*vh + hb},\n    {x = 0.12*rx,y = 3.5*vh + hb},\n    {x = 0.12*rx,y = 3.5*vh}\n}\n\nsetFontSize(Font, 4*vh)\nwb, hb = getTextBounds(Font,\"Item\")\nItemPoly = {\n    {x = 9.5*vh + 2.5*vh + wb,y = 15*vh - 0.5*vh},\n    {x = 9.5*vh + 2.5*vh + wb,y = 15*vh - 0.5*vh - hb},\n    {x = 9.5*vh + 2.5*vh,y = 15*vh - 0.5*vh - hb},\n    {x = 9.5*vh + 2.5*vh,y = 15*vh - 0.5*vh}\n}\n\nsetFontSize(Font, 4*vh)\nwb, hb = getTextBounds(Font,\"Quantity\")\nQuantityPoly = {\n    {x = 9.5*vh + 114.5*vh - 12.5*vh - wb/2,y = 15*vh - 0.5*vh},\n    {x = 9.5*vh + 114.5*vh - 12.5*vh - wb/2,y = 15*vh - 0.5*vh - hb},\n    {x = 9.5*vh + 114.5*vh - 12.5*vh + wb/2,y = 15*vh - 0.5*vh - hb},\n    {x = 9.5*vh + 114.5*vh - 12.5*vh + wb/2,y = 15*vh - 0.5*vh}\n}\n\nsetFontSize(Font, 4*vh)\nwb, hb = getTextBounds(Font,\"Volume\")\nVolumePoly = {\n    {x = 9.5*vh + 114.5*vh - 35*vh - wb/2,y = 15*vh - 0.5*vh},\n    {x = 9.5*vh + 114.5*vh - 35*vh - wb/2,y = 15*vh - 0.5*vh - hb},\n    {x = 9.5*vh + 114.5*vh - 35*vh + wb/2,y = 15*vh - 0.5*vh - hb},\n    {x = 9.5*vh + 114.5*vh - 35*vh + wb/2,y = 15*vh - 0.5*vh}\n}\n\nsetFontSize(Font, 4*vh)\nwb, hb = getTextBounds(Font,\"Mass\")\nMassPoly = {\n    {x = 9.5*vh + 114.5*vh - 53*vh - wb/2,y = 15*vh - 0.5*vh},\n    {x = 9.5*vh + 114.5*vh - 53*vh - wb/2,y = 15*vh - 0.5*vh - hb},\n    {x = 9.5*vh + 114.5*vh - 53*vh + wb/2,y = 15*vh - 0.5*vh - hb},\n    {x = 9.5*vh + 114.5*vh - 53*vh + wb/2,y = 15*vh - 0.5*vh}\n}\n\n\n\nif getCursorPressed() then\n    \n    x, y = getCursor()\n    \n    if insidePolygon(ReloadPoly, x, y) and ReloadButtonToggle then\n        setOutput('Reload')\n        ReloadPressedTime = getTime()\n    elseif insidePolygon(TablePoly, x, y) and Cards then\n        Table = true\n        Cards = false\n        setOutput('Table')\n        logMessage('Table')\n    elseif insidePolygon(CardsPoly, x, y) and Table then\n        Table = false\n        Cards = true\n        setOutput('Cards')\n        logMessage('Cards')\n    elseif insidePolygon(ItemPoly, x, y) and not ItemSort then\n        ItemSort = true\n        QuantitySort = false\n        VolumeSort = false\n        MassSort = false\n        setOutput('Item')\n        logMessage('Item')\n    elseif insidePolygon(QuantityPoly, x, y) and not QuantitySort then\n        ItemSort = false\n        QuantitySort = true\n        VolumeSort = false\n        MassSort = false\n        setOutput('Quantity')\n        logMessage('Quantity')\n    elseif insidePolygon(VolumePoly, x, y) and not VolumeSort then\n        ItemSort = false\n        QuantitySort = false\n        VolumeSort = true\n        MassSort = false\n        setOutput('Volume')\n        logMessage('Volume')\n    elseif insidePolygon(MassPoly, x, y) and not MassSort then\n        ItemSort = false\n        QuantitySort = false\n        VolumeSort = false\n        MassSort = true\n        setOutput('Mass')\n        logMessage('Mass')\n    end\n         \nend\n\nCheckTime = getTime()\nReloadWaitTime = (NHubs - 1)*30\n\nif (CheckTime-ReloadPressedTime) < CheckTime then\n    ReloadText = string.format('Reloading: %.0fs',ReloadWaitTime - (CheckTime-ReloadPressedTime))\n    ReloadButtonToggle = false\n    if (CheckTime-ReloadPressedTime) > ReloadWaitTime then\n        ReloadText = \"Reload Data\"\n        ReloadButtonToggle = true\n    end\nelse\n    ReloadText = \"Reload Data\"\n    ReloadButtonToggle = true\nend\n\nsetFontSize(Font, 4*vh)\nsetNextTextAlign(Aura1, AlignH_Center, AlignV_Middle)\nsetNextFillColor(Aura1,0.8,0.8,0.3,1)\naddText(Aura1,Font,ReloadText,0.10*rx,94*vh)\n\nif Cards then\n    setNextFillColor(Aura1,0.8,0.8,0.3,1)\nelse\n    setNextFillColor(Aura1,0.4,0.4,0.3,1)\nend\nsetFontSize(Font, 4*vh)\nsetNextTextAlign(Aura1, AlignH_Right, AlignV_Ascender)\naddText(Aura1,Font,\"Cards\",0.10*rx,3.5*vh)\n\nsetFontSize(Font, 4*vh)\nsetNextTextAlign(Aura1, AlignH_Center, AlignV_Ascender)\nsetNextFillColor(Aura1,0.8,0.8,0.3,1)\naddText(Aura1,Font,\"|\",0.11*rx,3.5*vh)\n\nif Table then\n    setNextFillColor(Aura1,0.8,0.8,0.3,1)\nelse\n    setNextFillColor(Aura1,0.4,0.4,0.3,1)\nend\nsetFontSize(Font, 4*vh)\nsetNextTextAlign(Aura1, AlignH_Left, AlignV_Ascender)\naddText(Aura1,Font,\"Table\",0.12*rx,3.5*vh)\n\n----------------------------------------------------------- Item Cards ---------------------------------------------------------------------\n\nlocal function wrap(str, limit)\n    local Lines, here, limit = {}, 1, limit or 72\n    local Lim = (str:find(\"(%s+)()(%S+)()\")) \n    if Lim == nil then Lim = string.len(str) else Lim = Lim -1 end\n    Lines[1] = string.sub(str,1,Lim)  -- Put the first word of the string in the first index of the table.\n  \n    str:gsub(\"(%s+)()(%S+)()\",\n          function(sp, st, word, fi)  -- Function gets called once for every space found.\n            if fi-here > limit then\n                  here = st\n                  Lines[#Lines+1] = word                                             -- If at the end of a line, start a new table index...\n            else Lines[#Lines] = Lines[#Lines]..\" \"..word end  -- ... otherwise add to the current table index.\n          end)\n  \n    return Lines\n  end\n  \n  function ItemCard(layer,font,data,X,Y,SX,SY,ibr,ibg,ibb)\n  \n      -- Top Corner --\n      \n      setNextStrokeColor(layer,ibr,ibg,ibb,1)\n      setNextStrokeWidth(layer,0.5*vh)  \n      addLine(layer, X, Y, X + SX*0.3 , Y)\n  \n      setNextStrokeColor(layer,ibr,ibg,ibb,0.75)\n      setNextStrokeWidth(layer,0.5*vh)\n      addLine(layer, X, Y, X , Y + SY*0.3)\n  \n      setNextFillColor(layer,ibr,ibg,ibb,1)\n      addCircle(layer,X, Y, 1*vh)\n      \n      -- Bottom Corner --\n  \n      setNextStrokeColor(layer,ibr,ibg,ibb,0.75)\n      setNextStrokeWidth(layer,0.5*vh)\n      addLine(layer, X + SX, Y + SY, X + SX - SX*0.1 , Y + SY)\n  \n      setNextStrokeColor(layer,ibr,ibg,ibb,0.55)\n      setNextStrokeWidth(layer,0.5*vh)\n      addLine(layer, X + SX, Y + SY, X + SX, Y + SY - SY*0.2)\n  \n      setNextFillColor(layer,ibr,ibg,ibb,1)\n      addCircle(layer,X + SX, Y + SY, 1*vh)\n  \n      -- Image --\n      cpath = data[\"I\"]\n      cpath = string.gsub(cpath, \"@\",\"elements/\")\n      cpath = string.gsub(cpath, \">\",\"functional\")\n      cpath = string.gsub(cpath, \"<\",\"iconslib/materialslib/env_\")\n      cpath = string.gsub(cpath, \"!\",\"icon\")\n      cpath = string.gsub(cpath, \"ş\",\"_001\")\n      cpath = string.gsub(cpath, \"ç\",\"part\")\n      cpath = string.gsub(cpath, \"ğ\",\"/env_\") \n      url = \"resources_generated/\" .. cpath .. \".png\"\n      image = loadImage(url)\n      addImage(layer, image, X + 1*vh, Y + 1*vh, 16*vh, 16*vh)\n      \n      -- Text --\n  \n      local myTable = wrap(data[\"N\"],10)\n      \n      for ii = 1,math.min(#myTable,4) do\n          setNextTextAlign(layer, AlignH_Left, AlignV_Ascender)\n          setNextFillColor(layer, 255/255, 255/255, 255/255, 1)\n          addText(layer, SubFont, myTable[ii], X+1*vh+17*vh, Y + 1*vh + (ii-1)*3*vh)\n      end\n  \n      setNextTextAlign(layer, AlignH_Right, AlignV_Ascender)\n      setNextFillColor(layer, 255/255, 255/255, 255/255, 1)\n      addText(layer, font, formatComma(tostring(data[\"Q\"])), X+1*vh+38*vh, Y + 14*vh)\n  \n  end\n  \n  X = 2.5*vh\n  Y = 12*vh\n  SX = 40*vh\n  SY = 18*vh\n  \n  local List = createLayer()\n  \n  ibr = 0.2\n  ibg = 0.7\n  ibb = 1\n  \n  ----------------------------------------------------------- Tabular Background ---------------------------------------------------------------------\n  \n  if Table then\n  \n      X = 9.5*vh\n      Y = 15*vh\n      SX = 114.5*vh\n      SY = 4.5*vh\n  \n      local HeaderFont = loadFont(getAvailableFontName(5), 4*vh)\n  \n      setNextFillColor(List, 0,0.8,1,0.4 + 0.6*boolTonumber[ItemSort])\n      setNextTextAlign(List, AlignH_Left, AlignV_Descender)\n      addText(List, HeaderFont, \"Item\", X + 2.5*vh, Y - 0.5*vh)\n  \n      setNextFillColor(List, 0,0.8,1,0.4 + 0.6*boolTonumber[QuantitySort])\n      setNextTextAlign(List, AlignH_Center, AlignV_Descender)\n      addText(List, HeaderFont, \"Quantity\", X + SX - 12.5*vh, Y - 0.5*vh)\n  \n      setNextFillColor(List, 0,0.8,1,0.4 + 0.6*boolTonumber[VolumeSort])\n      setNextTextAlign(List, AlignH_Center, AlignV_Descender)\n      addText(List, HeaderFont, \"Volume\", X + SX - 35*vh, Y - 0.5*vh)\n  \n      setNextFillColor(List, 0,0.8,1,0.4 + 0.6*boolTonumber[MassSort])\n      setNextTextAlign(List, AlignH_Center, AlignV_Descender)\n      addText(List, HeaderFont, \"Mass\", X + SX - 53*vh, Y - 0.5*vh)\n  \n      for jj = 1,11 do\n          setNextStrokeColor(List,1,1,1,0.05+jj*0.085)\n          setNextStrokeWidth(List,0.02*vh+jj*0.02*vh)\n          addLine(List,X + SX/21*(jj-1) + 0.1*vh, Y + (1-1)*10*vh, X + SX/21*(jj) - 0.1*vh, Y + (1-1)*10*vh)\n      end\n  \n      for jj = 12,21 do\n          setNextStrokeColor(List,1,1,1,1-(jj-11)*0.085)\n          setNextStrokeWidth(List,0.22*vh-(jj-11)*0.02*vh)\n          addLine(List,X + SX/21*(jj-1) + 0.1*vh, Y + (1-1)*10*vh, X + SX/21*(jj) - 0.1*vh, Y + (1-1)*10*vh)\n      end\n  \n      for ii = 1,8 do\n  \n          setNextFillColor(List,1,1,1,0.1)\n          addBox(List, X, Y + (ii-1)*2*SY, SX, SY)\n  \n          setNextFillColor(List,0,0.6,1,0.1)\n          addBox(List, X, Y + (ii-1)*2*SY, SX, SY)\n  \n          setNextFillColor(List,1,1,1,0.1)\n          addBox(List, X, Y + SY + (ii-1)*2*SY, SX, SY)\n  \n          setNextFillColor(List,0,0.3,0.5,0.1)\n          addBox(List, X, Y + SY + (ii-1)*2*SY, SX, SY)\n  \n      end\n      \n  end\n  \n  ----------------------------------------------------------- Fill Data ---------------------------------------------------------------------\n  \n  if DataTable[1] ~= nil then\n            \n      if Cards then\n          counter = 0\n          for ii = 1,3 do\n              for jj = 1,3 do\n                  counter = counter + 1\n                  if DataTable[counter] ~= nil then\n                      ItemCard(List,SubFont,DataTable[counter],X+(ii-1)*44*vh,Y+(jj-1)*25*vh,SX,SY,ibr,ibg,ibb)\n                  end\n              end\n          end\n      end\n      \n      if Table then\n          \n          X = 9.5*vh\n          Y = 13*vh\n          \n          for ii = 1,16 do\n              \n              if DataTable[ii] ~= nil then\n                  \n                  Row = DataTable[ii]\n  \n                  setNextFillColor(List, 1, 1, 1, 1)\n                  setNextTextAlign(List, AlignH_Left, AlignV_Middle)\n                  addText(List, SubFont, Row[\"N\"], X + 3*vh, Y + SY + (ii-1)*SY)\n  \n                  setNextFillColor(List, 1, 1, 1, 1)\n                  setNextTextAlign(List, AlignH_Right, AlignV_Middle)\n                  addText(List, SubFont, formatComma(Row[\"Q\"]), X + SX - 4.5*vh, Y + SY + (ii-1)*SY)\n  \n                  setNextFillColor(List, 1, 1, 1, 1)\n                  setNextTextAlign(List, AlignH_Right, AlignV_Middle)\n                  addText(List, SubFont, string.format('%.2f kL',Row[\"V\"]/1000), X + SX - 27*vh, Y + SY + (ii-1)*SY)\n  \n                  setNextFillColor(List, 1, 1, 1, 1)\n                  setNextTextAlign(List, AlignH_Right, AlignV_Middle)\n                  addText(List, SubFont, string.format('%.2f t',Row[\"M\"]/1000), X + SX - 48*vh, Y + SY + (ii-1)*SY)\n    \n              end\n          \n          end\n          \n      end\n      \n  end\n  \n  ----------------------------------------------------------- Pagination -----------------------------------------------------------------\n  \n  if Cards then\n  \n      X = 40*vw\n      Y = 87*vh\n      SX = 70*vw\n      SY = 5*vh\n      SliderW = 40*vh\n      SliderH = 5*vh\n  \n      Data = 100*(Page-1)/(PageMax-1);\n  \n      setNextFillColor(List,0.2,0.7,1,1)\n      addBoxRounded(List, \n          X - SX/2 + Data/100*(SX-SliderW), \n          Y - SliderH/2, \n          SliderW, \n          SliderH,\n          2*vh)\t\n  \n      setNextFillColor(List,0,0.2,0.8,0.1)\n      addBoxRounded(List, \n          X - SX/2,\n          Y - SY/2, \n          SX, \n          SY,\n          2*vh)\n      \n  end\n  \n  ----------------------------------------------------------- Horizontal Gauges --------------------------------------------------------------\n  \n  function HorizontalGauge(layer,font,Data,Mass,X,Y,SX,SY,n,r,g,b)\n  \n      Height = math.ceil(Data/(100/n))\n  \n      for jj = 1,Height,1 do\n          setNextFillColor(layer,r,g,b,0.2+(jj^3)*(0.8/(Height^3)))\n          addQuad(layer,\n              X - SX/2 + (jj-1)*SX/n + SX/n*0.2,\n              Y - SY/2,\n              X - SX/2 + (jj-1)*SX/n + SX/n*0.2,\n              Y + SY/2,\n              X - SX/2 + (jj-1)*SX/n + SX/n*0.8,\n              Y + SY/2,\n              X - SX/2 + (jj-1)*SX/n + SX/n*0.8,\n              Y - SY/2)\n      end\n  \n      -- Flair --\n  \n      setNextStrokeColor(layer,r,g,b,1)\n      setNextStrokeWidth(layer,0.5*vh)\n      addLine(layer, X - SX/2 - vh, Y - SY/2 - vh, X - SX/2 - vh, Y - SY/2 - vh + SY*0.6 )\n  \n      setNextStrokeColor(layer,r,g,b,1)\n      setNextStrokeWidth(layer,0.5*vh)\n      addLine(layer, X - SX/2 - vh, Y - SY/2 - vh, X - SX/2 - vh + SX*0.4, Y - SY/2 - vh )\n  \n      setNextFillColor(layer,r,g,b,1)\n      addCircle(layer,X - SX/2 - vh, Y - SY/2 - vh, 1*vh)\n  \n      setNextStrokeColor(layer,r,g,b,0.5)\n      setNextStrokeWidth(layer,0.25*vh)\n      addLine(layer, X + SX/2 + vh, Y + SY/2 + vh, X + SX/2 + vh, Y + SY/2 + vh - SY*0.5 )\n  \n      setNextStrokeColor(layer,r,g,b,0.5)\n      setNextStrokeWidth(layer,0.25*vh)\n      addLine(layer, X + SX/2 + vh, Y + SY/2 + vh, X + SX/2 + vh - SX*0.4, Y + SY/2 + vh )\n  \n      setNextFillColor(layer,r,g,b,1)\n      addCircle(layer,X + SX/2 + vh, Y + SY/2 + vh, 0.5*vh)\n      \n      -- Text --\n      \n      setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\n      setNextFillColor(layer, r, g, b, 1)\n      addText(layer, font, string.format(\"%.1f\",Data) .. \"%\", X+SX/2+2*vh, Y)\n      \n      setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\n      setNextFillColor(layer, r, g, b, 1)\n      addText(layer, font, string.format(\"%.1f\",Mass) .. \"t\", X - SX/2 - 2*vh, Y)\n  \n  end\n  \n  R = {1,0.2,0.2,1,1,0,1,0.5}\n  G = {0.2,1,0.2,1,0,1,0.5,0.2}\n  B = {0.2,0.2,1,0,1,1,0.2,1}\n  \n  TotalMass = 0\n  TotalVolume = 0\n  TotalCapacity = 0\n  \n  for ii = 1,NHubs do\n      M = HubsInfo[1+(ii-1)*3]\n      V = HubsInfo[2+(ii-1)*3]\n      C = HubsInfo[3+(ii-1)*3]\n      \n      TotalMass = TotalMass + M\n      TotalVolume = TotalVolume + V\n      TotalCapacity = TotalCapacity + C\n      \n      HorizontalGauge(List,SubFont,100*V/C,M,150*vh,28*vh+ii*8*vh,16*vh,3*vh,10,R[ii],G[ii],B[ii])\n  end\n  \n  -------------------------------------------------------- Round Gauge  --------------------------------------------------------------\n\nlocal Pie = createLayer()\n\nx1 = 0.5\nx2 = 0.6\ny1 = 25\ny2 = 30\n\nData = 100*TotalVolume/TotalCapacity\n\nfor ii = 0,360*Data/100,7.2 do\n    \n    theta = 180 + ii\n    \n    setNextFillColor(Pie,0.8,0.8,0.3,1)\n    addQuad(Pie,\n        50*vw - (-x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),\n        50*vh - (-x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),\n        50*vw - (x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),\n        50*vh - (x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),\n        50*vw - (x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),\n        50*vh - (x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta))),\n        50*vw - (-x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),\n        50*vh - (-x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta)))\n    )\n      \n    \nend\n\nfor ii = math.floor(360*Data/(7.2*100))*7.2,359,7.2 do\n    \n    theta = 180 + ii\n    \n    setNextFillColor(Pie,0.8,0.8,0.3,0.1)\n    addQuad(Pie,\n        50*vw - (-x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),\n        50*vh - (-x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),\n        50*vw - (x2*vw*math.cos(math.rad(theta))+y2*vh*math.sin(math.rad(theta))),\n        50*vh - (x2*vw*math.sin(math.rad(theta))-y2*vh*math.cos(math.rad(theta))),\n        50*vw - (x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),\n        50*vh - (x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta))),\n        50*vw - (-x1*vw*math.cos(math.rad(theta))+y1*vh*math.sin(math.rad(theta))),\n        50*vh - (-x1*vw*math.sin(math.rad(theta))-y1*vh*math.cos(math.rad(theta)))\n    )\n      \n    \nend\n\nsetFontSize(Font, 5*vh)\nsetNextTextAlign(Aura1, AlignH_Center, AlignV_Middle)\nsetNextFillColor(Aura1,0.8,0.8,0.3,1)\naddText(Aura1,Font,string.format(\"%.2f\",Data) .. \"%\",89.6*vw,16.25*vh)\n\nsetFontSize(Font, 2.75*vh)\nsetNextTextAlign(Aura1, AlignH_Center, AlignV_Middle)\nsetNextFillColor(Aura1,1,1,1,1)\naddText(Aura1,Font,string.format(\"%.1f\",TotalVolume) .. \" kL\",89.6*vw,20*vh)\n\naddLine(Aura1,85.6*vw,21.5*vh,93.6*vw,21.7*vh)\n\nsetFontSize(Font, 2.75*vh)\nsetNextTextAlign(Aura1, AlignH_Center, AlignV_Middle)\nsetNextFillColor(Aura1,1,1,1,1)\naddText(Aura1,Font,string.format(\"%.1f\",TotalCapacity) .. \" kL\",89.6*vw,23.4*vh)\n\nsetFontSize(Font, 2.75*vh)\nsetNextTextAlign(Aura1, AlignH_Center, AlignV_Middle)\nsetNextFillColor(Aura1,1,1,1,1)\naddText(Aura1,Font,string.format(\"%.1f\",TotalMass) .. \" t\",89.6*vw,12.5*vh)\n\nsetLayerOrigin(Pie,0.5*rx,0.5*ry)\nsetLayerScale(Pie,0.42,0.42)\nsetLayerTranslation(Pie,0.395*rx,-0.32*ry)\n\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nrequestAnimationFrame(5) \n    ]])",
            "filter": {
                "args": [],
                "signature": "onStart()",
                "slotKey": "-1"
            },
            "key": "18"
        },
        {
            "code": "tablex = require(\"pl/tablex\")\n\n-- Converts \"if variable\" to 1,0 for easier checking.\nfunction exists(var)\n    if var then check=1 else check=0 end\n    return check\nend\n\n-- Rounds\nfunction round(num, numDecimalPlaces)\n    local mult = 10^(numDecimalPlaces or 0)\n    return math.floor(num * mult + 0.5) / mult\nend\n\n-- Converts boolean to 1,0 for easier checking.\nboolTonumber={[true]=1,[false]=0}\n\n-- Collects OnContentUpdate from Hubs and merges into a single table indexed by ID.\nfunction ReceivePayload(Hub)\n    local Payload = Hub.getContent()\n\n    for index, data in pairs(Payload) do\n        if ItemsList[tostring(data.id)] then\n            ItemsList[tostring(data.id)] = ItemsList[tostring(data.id)] + data.quantity\n        else\n            ItemsList[tostring(data.id)] = data.quantity\n        end\n    end\n\n    return true\nend\n\n\n----------------\n\n\nfunction UpdateData()\n    \n    ----- Build the Item Table -----   \n    CompareFunction = '>'\n    if SortSwitch == 1 then\n        SortList = ItemsListVolume\n    elseif SortSwitch == 2 then\n        SortList = ItemsListQuantity\n    elseif SortSwitch == 3 then\n        SortList = ItemsListMass\n    elseif SortSwitch == 4 then\n        SortList = ItemsListName\n        CompareFunction = '<'\n    end\n    \n    counter = 0\n    \n    datatable = \"\"\n    \n    if DisplayMode == 'Cards' then\n        for id, data in tablex.sortv(SortList,CompareFunction) do\n\n            counter = counter + 1\n\n            if counter > (Page-1)*3 and counter <= ((Page-1)*3 + 9) then\n\n                current = system.getItem(tonumber(id))\n                path = current[\"iconPath\"]\n                path = string.gsub(path,\"resources_generated/\", \"\")\n                path = string.gsub(path,\".png\", \"\")\n                path = string.gsub(path,\"elements/\", \"@\")\n                path = string.gsub(path,\"functional\", \">\")\n                path = string.gsub(path,\"iconslib/materialslib/env_\", \"<\")\n                path = string.gsub(path,\"icon\", \"!\")\n                path = string.gsub(path,\"_001\", \"ş\")\n                path = string.gsub(path,\"part\", \"ç\")\n                path = string.gsub(path,\"/env_\", \"ğ\")              \n\n                local Q = tostring(math.ceil(ItemsListQuantity[id]))\n                local V = tostring(math.ceil(ItemsListVolume[id]))\n                local M = tostring(math.ceil(ItemsListMass[id]))\n                local I = path\n                local N = ItemsListName[id]\n\n                currentrow = Q .. \"$\" .. V .. \"$\" .. M .. \"$\" .. I .. \"$\" .. N\n\n                datatable = datatable .. \"#\" .. currentrow\n\n            end\n\n        end\n    elseif DisplayMode == 'Table' then\n        for id, data in tablex.sortv(SortList,CompareFunction) do\n\n            counter = counter + 1\n\n            if counter > (Page-1)*3 and counter <= ((Page-1)*3 + 16) then\n\n                current = system.getItem(tonumber(id))\n                local Q = tostring(math.ceil(ItemsListQuantity[id]))\n                local V = tostring(math.ceil(ItemsListVolume[id]))\n                local M = tostring(math.ceil(ItemsListMass[id]))\n                local I = \"P\"\n                local N = ItemsListName[id]\n\n                currentrow = Q .. \"$\" .. V .. \"$\" .. M .. \"$\" .. I .. \"$\" .. N\n\n                datatable = datatable .. \"#\" .. currentrow\n\n            end\n\n        end\n    end\n\n    ----- Acquire the Header Info -----\n    Header = ''\n    if Hub1 then\n        M = string.format('%.1f',Hub1.getItemsMass()/1000)\n        V = string.format('%.1f',Hub1.getItemsVolume()/1000)\n        C = string.format('%.1f',Hub1.getMaxVolume()/1000)\n        Header = Header .. \"$\" .. M .. \"$\" .. V .. \"$\" .. C\n    end\n    if Hub2 then\n        M = string.format('%.1f',Hub2.getItemsMass()/1000)\n        V = string.format('%.1f',Hub2.getItemsVolume()/1000)\n        C = string.format('%.1f',Hub2.getMaxVolume()/1000)\n        Header = Header .. \"$\" .. M .. \"$\" .. V .. \"$\" .. C\n    end\n    if Hub3 then\n        M = string.format('%.1f',Hub3.getItemsMass()/1000)\n        V = string.format('%.1f',Hub3.getItemsVolume()/1000)\n        C = string.format('%.1f',Hub3.getMaxVolume()/1000)\n        Header = Header .. \"$\" .. M .. \"$\" .. V .. \"$\" .. C\n    end\n    if Hub4 then\n        M = string.format('%.1f',Hub4.getItemsMass()/1000)\n        V = string.format('%.1f',Hub4.getItemsVolume()/1000)\n        C = string.format('%.1f',Hub4.getMaxVolume()/1000)\n        Header = Header .. \"$\" .. M .. \"$\" .. V .. \"$\" .. C\n    end\n    if Hub5 then\n        M = string.format('%.1f',Hub5.getItemsMass()/1000)\n        V = string.format('%.1f',Hub5.getItemsVolume()/1000)\n        C = string.format('%.1f',Hub5.getMaxVolume()/1000)\n        Header = Header .. \"$\" .. M .. \"$\" .. V .. \"$\" .. C\n    end\n    if Hub6 then\n        M = string.format('%.1f',Hub6.getItemsMass()/1000)\n        V = string.format('%.1f',Hub6.getItemsVolume()/1000)\n        C = string.format('%.1f',Hub6.getMaxVolume()/1000)\n        Header = Header .. \"$\" .. M .. \"$\" .. V .. \"$\" .. C\n    end\n    if Hub7 then\n        M = string.format('%.1f',Hub7.getItemsMass()/1000)\n        V = string.format('%.1f',Hub7.getItemsVolume()/1000)\n        C = string.format('%.1f',Hub7.getMaxVolume()/1000)\n        Header = Header .. \"$\" .. M .. \"$\" .. V .. \"$\" .. C\n    end\n    if Hub8 then\n        M = string.format('%.1f',Hub8.getItemsMass()/1000)\n        V = string.format('%.1f',Hub8.getItemsVolume()/1000)\n        C = string.format('%.1f',Hub8.getMaxVolume()/1000)\n        Header = Header .. \"$\" .. M .. \"$\" .. V .. \"$\" .. C\n    end\n    \n    ----- Info -----\n    Info = tostring(NHubs) .. \"$\" .. tostring(Page) .. \"$\" .. tostring(math.ceil(NumItems/3) - 2) \n    .. \"$\" .. DisplayMode .. \"$\" .. tostring(SortSwitch) .. \"$\" .. tostring(round(system.getArkTime()-UpdateTime))\n    \n    ----- Compose Message -----\n    Message = Info .. \"&\" .. Header .. \"&\" .. datatable \n    system.print(Message)\n    Screen.setScriptInput(Message)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            "filter": {
                "args": [],
                "signature": "onStart()",
                "slotKey": "-4"
            },
            "key": "19"
        }
    ],
    "methods": [],
    "events": []
}